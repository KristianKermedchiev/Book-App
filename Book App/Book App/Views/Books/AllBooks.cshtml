@model Book_App.Models.PaginatedBooksViewModel

@{
    ViewData["Title"] = "All Books";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container mt-4">

    <div class="row justify-content-center">
        <div class="col-12 col-md-4 col-lg-4 col-sm-8 mb-3">
            <div class="input-group">
                <label for="genreFilter" class="input-group-text">Filter by Genre</label>
                <select class="form-select" id="genreFilter" onchange="filterBooks()">
                    <option value="all" selected>All Genres</option>
                    <option value="classics">Classics</option>
                    <option value="fiction">Fiction</option>
                    <option value="horror">Horror</option>
                    <option value="mystery">Mystery</option>
                    <option value="romantic">Romantic</option>
                    <option value="sci-fi">Sci-Fi</option>
                    <option value="thriller">Thriller</option>
                </select>
            </div>
        </div>

        <div class="col-12 col-md-3 col-lg-3 col-sm-8 mb-3">
            <div class="input-group">
                <input type="text" class="form-control" id="searchInput" placeholder="Search by Title">
                <button class="btn btn-outline-secondary" type="button" onclick="searchBooks()">Search</button>
            </div>
        </div>

        <div class="col-12 col-md-2 col-lg-2 col-sm-7 text-center text-md-start">
            <a asp-controller="Books" asp-action="Create" class="btn btn-primary">Create a Book</a>
        </div>
    </div>

    <h2 class="mb-5 mt-3 text-center">@ViewData["Title"]</h2>

    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4" style="margin-bottom:65px">
        @foreach (var book in Model.Books.Where(b=> b.IsApproved))
        {
            <div class="col" data-genres="@string.Join(",", book.Genres.Select(genre => genre.Name.ToLower()))">
                <div class="card h-100 border-0">
                    <div class="d-flex justify-content-center">
                        <img src="@book.ImgUrl" class="card-img-top" alt="@book.Title" style="width: 50%; height: 350px;">
                    </div>
                    <div class="card-body text-center">
                        <h5 class="card-title">@book.Title</h5>
                        <p class="card-text">@book.Author</p>
                        <p class="card-text"><small class="text-muted">Published: @book.YearPublished</small></p>
                        @if (book.Genres.Any())
                        {
                            var genreNames = book.Genres.Select(genre => genre.Name);
                            <p class="card-text"><small class="text-muted">Genres: @string.Join(", ", genreNames)</small></p>
                        }
                        <a asp-controller="Books" asp-action="Details" asp-route-id="@book.Id" class="btn btn-primary">View Details</a>
                    </div>
                </div>
            </div>
        }
    </div>

    <div class="mt-4 d-flex justify-content-center">
        <nav aria-label="Page navigation">
            <ul class="pagination">
                @for (int i = 1; i <= Model.TotalPages; i++)
                {
                    <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                        @if (i == Model.CurrentPage)
                        {
                            <span class="page-link">@i</span>
                        }
                        else
                        {
                            <a class="page-link" href="@Url.Action("AllBooks", new { page = i })">@i</a>
                        }
                    </li>
                }
            </ul>
        </nav>
    </div>

</div>

@section scripts {
    <script>
        function filterBooks() {
            var selectedGenre = document.getElementById("genreFilter").value;

            var bookCards = document.getElementsByClassName("col");

            for (var i = 0; i < bookCards.length; i++) {
                var bookCard = bookCards[i];
                var genres = bookCard.getAttribute("data-genres");

                if (selectedGenre === "all" || genres.includes(selectedGenre)) {
                    bookCard.style.display = "block";
                } else {
                    bookCard.style.display = "none";
                }
            }
        }

        function searchBooks() {
            var searchInput = document.getElementById("searchInput").value.toLowerCase();

            var bookCards = document.getElementsByClassName("col");

            for (var i = 0; i < bookCards.length; i++) {
                var bookCard = bookCards[i];
                var title = bookCard.querySelector(".card-title").innerText.toLowerCase();

                if (title.includes(searchInput)) {
                    bookCard.style.display = "block";
                } else {
                    bookCard.style.display = "none";
                }
            }
        }
    </script>
}
