@model Book_App.Models.Book
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims

@{
    ViewData["Title"] = "Book Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .book-details-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
    }

    .book-image {
        max-width: 100%;
        height: auto;
        max-height: 400px;
        margin-bottom: 30px;
    }

    .genres-list {
        list-style-type: none;
        padding: 0;
    }

    .action-buttons {
        display: flex;
        justify-content: space-between;
        margin-top: 20px;
    }

        .action-buttons button {
            flex-grow: 1;
            margin: 0 5px;
        }

    .btn-primary {
        background-color: #007bff;
        border-color: #007bff;
    }

    .btn-success {
        background-color: #28a745; 
        border-color: #28a745;
    }

    .btn-danger {
        background-color: #dc3545; 
        border-color: #dc3545;
    }

    p, h5 {
        font-size: 16px; 
    }

    .comments-container {
        margin-top: 20px;
    }

    .comment {
        border: 1px solid #ddd;
        padding: 10px;
        margin-bottom: 10px;
        position: relative;
    }

    .delete-button {
        position: absolute;
        top: 5px;
        right: 5px;
    }

    .retract-button {
        cursor: pointer;
        color: #007bff;
    }

    .rating-container {
        margin-top: 20px;
    }

    .rating-button {
        cursor: pointer;
        margin: 0 5px;
    }
</style>

<h2 class="text-center">@Model.Title</h2>

<div class="book-details-container">
    <div class="text-center">
        <img src="@Model.ImgUrl" class="book-image" alt="@Model.Title">
    </div>
    
    <div class="d-flex justify-content-between">
        <p class="p-3">Author: @Model.Author</p>
        <p class="p-3">Year Published: @Model.YearPublished</p>
        <p class="p-3">Pages: @Model.Pages</p>
    </div>

    <p>Description: @Model.Description</p>

    <h5 class="d-flex justify-content-center">Rating: &nbsp;<span class="average-rating"> @Model.AverageRating</span></h5>

    <h5 class="d-flex justify-content-center">Genres:</h5>
    <div class="genres-list d-flex justify-content-center">
        @foreach (var genre in Model.Genres)
        {
            <p class="card-text">@genre.Name</p>
            @if (genre != Model.Genres.Last())
            {
                <span>&nbsp; - &nbsp; </span>
            }
        }
    </div>


    @if (User.Identity.IsAuthenticated && User.FindFirst(ClaimTypes.NameIdentifier)?.Value == Model.OwnerId)
    {
        <div class="action-buttons">
            <a asp-controller="Books" asp-action="Update" asp-route-id="@Model.Id" class="btn btn-primary">Update</a>
            <a asp-controller="Books" asp-action="AllBooks" class="btn btn-success">Back</a>

            <form asp-controller="Books" asp-action="Delete" asp-route-id="@Model.Id" method="post" onsubmit="return confirm('Are you sure you want to delete this book?');">
                <button type="submit" class="btn btn-danger">Delete</button>
            </form>
        </div>
    }
    else
    {
        <div class="action-buttons d-flex justify-content-center">
            <a asp-controller="Books" asp-action="AllBooks" class="btn btn-success">Back</a>
        </div>
    }

    <h3 class="mt-5 d-flex justify-content-center">Rate The Book</h3>

    <div class="rating-container">
        <div class="d-flex justify-content-center">
            @{
                int userRating = Model.Ratings.FirstOrDefault(r => r.UserId == User.FindFirst(ClaimTypes.NameIdentifier)?.Value)?.RatingValue ?? 0;
            }

            @for (int i = 1; i <= 5; i++)
            {
                <button type="button" class="rating-button @(i <= userRating ? "btn btn-warning" : "btn btn-outline-warning")" data-value="@i">@i</button>
            }
        </div>
    </div>

    <h3 class="mt-5 d-flex justify-content-center">Add a Comment</h3>

    <form asp-controller="Comments" asp-action="Create" method="post">
        <input type="hidden" name="bookId" value="@Model.Id" />
        <div class="form-group">
            <label for="commentContent">Comment:</label>
            <textarea class="form-control" id="commentContent" name="Content"></textarea>
        </div>
        <div></div>
        <button type="submit" class="btn btn-primary mt-5">Add Comment</button>
    </form>

    <h3 class="mt-5 d-flex justify-content-center">
        <span class="retract-button" id="toggle-comments">Toggle Comments (@Model.Comments.Count())</span>
    </h3>

    <div class="comments-container" id="comments-container">
        @foreach (var comment in Model.Comments)
        {
            <div class="comment">
                <p>@comment.Content</p>
                <small>
                    @if (comment.User != null)
                    {
                        <span>Posted by: @comment.User.UserName on @comment.CreatedAt</span>
                    }
                    else
                    {
                        <span>Posted on @comment.CreatedAt</span>
                    }
                </small>

                @if (User.Identity.IsAuthenticated && User.FindFirst(ClaimTypes.NameIdentifier)?.Value == comment.UserId)
                {
                    <form asp-controller="Comments" asp-action="Delete" method="post" onsubmit="return confirm('Are you sure you want to delete this comment?');">
                        <input type="hidden" name="id" value="@comment.Id" />
                        <button type="submit" class="btn btn-danger btn-sm delete-button">Delete</button>
                    </form>
                }
            </div>
        }
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function () {
        $('#toggle-comments').click(function () {
            $('#comments-container').slideToggle();
        });
    });
    function submitRating(bookId, ratingValue) {
        $.ajax({
            url: '@Url.Action("Rate", "Books")', // Replace with the actual URL of the Rate action
            type: 'POST',
            data: {
                bookId: bookId,
                ratingValue: ratingValue
            },
            success: function (response) {
                // If the rating submission is successful, you can perform any necessary actions here
                console.log('Rating submitted successfully');
                // For example, you might want to update the UI to reflect the new rating
                // Reload the page to reflect the updated rating
                location.reload();
            },
            error: function (xhr, status, error) {
                // Handle error
                console.error(xhr.responseText);
            }
        });
    }

    $('.rating-button').click(function () {
        var bookId = '@Model.Id'; // Get the ID of the current book
        var ratingValue = parseInt($(this).data('value')); // Get the rating value from the button's data attribute
        submitRating(bookId, ratingValue); // Call the submitRating function with bookId and ratingValue
    });
</script>